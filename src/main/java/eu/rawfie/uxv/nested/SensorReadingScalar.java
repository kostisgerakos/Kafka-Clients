/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.rawfie.uxv.nested;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SensorReadingScalar extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 898454885164837312L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensorReadingScalar\",\"namespace\":\"eu.rawfie.uxv.nested\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"Header\",\"fields\":[{\"name\":\"sourceSystem\",\"type\":\"string\"},{\"name\":\"sourceModule\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"long\"}]}},{\"name\":\"value\",\"type\":\"float\"},{\"name\":\"unit\",\"type\":{\"type\":\"enum\",\"name\":\"Unit\",\"symbols\":[\"AMPERE\",\"VOLT\",\"DEGREES\",\"DEGREESxDEGREES\",\"METERS\",\"BIT\",\"BYTE\",\"KILOGRAM\",\"DECIBEL\",\"KELVIN\",\"CELCIUS\",\"PASCAL\",\"HERTZ\",\"METER\",\"METER_PER_SECOND\",\"METER_PER_SECOND_PER_SECOND\",\"SECOND\",\"SIEMENS_PER_METER\",\"NTU\",\"NEWTON\",\"PERCENT\",\"PERCENTAGE\",\"PARTS_PER_MILLION\",\"PARTS_PER_BILLION\",\"PSU\",\"RADIAN\",\"RADIAN_PER_SECOND\",\"ROTATION_PER_MINUTE\",\"OTHER\",\"METERS_PER_SECOND\",\"DECIBEL_MILLIWATT\",\"MEGABITS_PER_SECOND\",\"TBD\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private eu.rawfie.uxv.nested.Header header;
   private float value;
   private eu.rawfie.uxv.nested.Unit unit;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SensorReadingScalar() {}

  /**
   * All-args constructor.
   * @param header The new value for header
   * @param value The new value for value
   * @param unit The new value for unit
   */
  public SensorReadingScalar(eu.rawfie.uxv.nested.Header header, java.lang.Float value, eu.rawfie.uxv.nested.Unit unit) {
    this.header = header;
    this.value = value;
    this.unit = unit;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return value;
    case 2: return unit;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (eu.rawfie.uxv.nested.Header)value$; break;
    case 1: value = (java.lang.Float)value$; break;
    case 2: unit = (eu.rawfie.uxv.nested.Unit)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public eu.rawfie.uxv.nested.Header getHeader() {
    return header;
  }

  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(eu.rawfie.uxv.nested.Header value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.lang.Float getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.lang.Float value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'unit' field.
   * @return The value of the 'unit' field.
   */
  public eu.rawfie.uxv.nested.Unit getUnit() {
    return unit;
  }

  /**
   * Sets the value of the 'unit' field.
   * @param value the value to set.
   */
  public void setUnit(eu.rawfie.uxv.nested.Unit value) {
    this.unit = value;
  }

  /**
   * Creates a new SensorReadingScalar RecordBuilder.
   * @return A new SensorReadingScalar RecordBuilder
   */
  public static eu.rawfie.uxv.nested.SensorReadingScalar.Builder newBuilder() {
    return new eu.rawfie.uxv.nested.SensorReadingScalar.Builder();
  }

  /**
   * Creates a new SensorReadingScalar RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SensorReadingScalar RecordBuilder
   */
  public static eu.rawfie.uxv.nested.SensorReadingScalar.Builder newBuilder(eu.rawfie.uxv.nested.SensorReadingScalar.Builder other) {
    return new eu.rawfie.uxv.nested.SensorReadingScalar.Builder(other);
  }

  /**
   * Creates a new SensorReadingScalar RecordBuilder by copying an existing SensorReadingScalar instance.
   * @param other The existing instance to copy.
   * @return A new SensorReadingScalar RecordBuilder
   */
  public static eu.rawfie.uxv.nested.SensorReadingScalar.Builder newBuilder(eu.rawfie.uxv.nested.SensorReadingScalar other) {
    return new eu.rawfie.uxv.nested.SensorReadingScalar.Builder(other);
  }

  /**
   * RecordBuilder for SensorReadingScalar instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensorReadingScalar>
    implements org.apache.avro.data.RecordBuilder<SensorReadingScalar> {

    private eu.rawfie.uxv.nested.Header header;
    private eu.rawfie.uxv.nested.Header.Builder headerBuilder;
    private float value;
    private eu.rawfie.uxv.nested.Unit unit;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.rawfie.uxv.nested.SensorReadingScalar.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = eu.rawfie.uxv.nested.Header.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unit)) {
        this.unit = data().deepCopy(fields()[2].schema(), other.unit);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SensorReadingScalar instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.rawfie.uxv.nested.SensorReadingScalar other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.unit)) {
        this.unit = data().deepCopy(fields()[2].schema(), other.unit);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public eu.rawfie.uxv.nested.Header getHeader() {
      return header;
    }

    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.SensorReadingScalar.Builder setHeader(eu.rawfie.uxv.nested.Header value) {
      validate(fields()[0], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public eu.rawfie.uxv.nested.Header.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(eu.rawfie.uxv.nested.Header.newBuilder(header));
        } else {
          setHeaderBuilder(eu.rawfie.uxv.nested.Header.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public eu.rawfie.uxv.nested.SensorReadingScalar.Builder setHeaderBuilder(eu.rawfie.uxv.nested.Header.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.SensorReadingScalar.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.lang.Float getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.SensorReadingScalar.Builder setValue(float value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.SensorReadingScalar.Builder clearValue() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'unit' field.
      * @return The value.
      */
    public eu.rawfie.uxv.nested.Unit getUnit() {
      return unit;
    }

    /**
      * Sets the value of the 'unit' field.
      * @param value The value of 'unit'.
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.SensorReadingScalar.Builder setUnit(eu.rawfie.uxv.nested.Unit value) {
      validate(fields()[2], value);
      this.unit = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'unit' field has been set.
      * @return True if the 'unit' field has been set, false otherwise.
      */
    public boolean hasUnit() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'unit' field.
      * @return This builder.
      */
    public eu.rawfie.uxv.nested.SensorReadingScalar.Builder clearUnit() {
      unit = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public SensorReadingScalar build() {
      try {
        SensorReadingScalar record = new SensorReadingScalar();
        if (headerBuilder != null) {
          record.header = this.headerBuilder.build();
        } else {
          record.header = fieldSetFlags()[0] ? this.header : (eu.rawfie.uxv.nested.Header) defaultValue(fields()[0]);
        }
        record.value = fieldSetFlags()[1] ? this.value : (java.lang.Float) defaultValue(fields()[1]);
        record.unit = fieldSetFlags()[2] ? this.unit : (eu.rawfie.uxv.nested.Unit) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
